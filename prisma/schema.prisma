// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  refreshToken String?
  posts     Post[]  @relation("UserPosts")
}


model Post {
  id             String   @id @default(uuid())
  title          String
  subtitle       String
  content        String
  videoUrl       String
  published      Boolean  @default(false)
  authorId       String
  author         User     @relation(name: "UserPosts", fields: [authorId], references:[id], onDelete: Cascade)
  categories     PostCategory[]
  postTypeId     Int?
  postType       PostType? @relation(fields: [postTypeId], references:[id], onDelete: Restrict)
  publishedDate  DateTime
  position       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("post")
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  description String 
  posts       PostCategory[]

 @@map("categories")
}

model PostType {
  id            Int       @id @default(autoincrement())
  name          String   
  description   String?
  order         Int       @unique
  post          Post[]

  @@map("post_types")
}

model PostCategory{
  postId      String    @map("post_id")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  categoryId  Int       @map("category_id")
  category    Category  @relation(fields:[categoryId], references: [id], onDelete: Cascade)
  order       Int       @default(0)
  isMain      Boolean   @default(false)

  @@id([postId, categoryId])
  @@map("post_category")
}